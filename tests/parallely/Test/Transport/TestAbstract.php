<?php
/**
 * Test class for parallely_Transport_SharedMemory.
 * Generated by PHPUnit on 2012-03-24 at 14:59:34.
 */
namespace parallely\Test\Transport;

abstract class TestAbstract extends \PHPUnit_Framework_TestCase {

    /**
     * The test-object
     *
     * @var \parallely\TransportInterface
     */
    protected $_object;

    /**
     * The test class
     *
     * @var string
     */
    protected $_sTestClass = '';

    /**
     * The configuration to set
     *
     * @var \stdClass
     */
    protected $_oOptions;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp() {
        if (class_exists($this->_sTestClass) === true) {
            $this->_object = new $this->_sTestClass();
            $this->assertInstanceOf('\\parallely\\TransportInterface', $this->_object);
            $this->assertInstanceOf('\\parallely\\TransportInterface', $this->_object->setConfig($this->_oOptions));
        }
        else {
            $this->markTestSkipped(sprintf('Test class %s does not exist', $this->_sTestClass));
        }
    }

    /**
     * Test the whole transport
     */
    public function testAll() {
        $sTestVal = uniqid();
        $sTestKey = (int) microtime(true);

        $this->assertFalse($this->_object->read($sTestKey));
        $this->assertInstanceOf($this->_sTestClass, $this->_object->write($sTestKey, $sTestVal));
        $this->assertEquals($sTestVal, $this->_object->read($sTestKey));
        $this->assertInstanceOf($this->_sTestClass, $this->_object->free());
    }

    /**
     * Test a setup-error
     */
    public function testSetupError() {
        $aOptions = $this->_object->getOptions();
        if (empty($aOptions) !== true) {
            $this->setExpectedException('\\parallely\\Exception', \parallely\Exception::SETUP_ERROR);
            $this->_object->setConfig(new \stdClass());
        }
        else {
            $this->markTestSkipped(sprintf('No options to test for %s', $this->_sTestClass));
        }
    }
}
