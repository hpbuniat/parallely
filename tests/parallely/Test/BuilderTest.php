<?php
/**
 * Test class for \parallely\Builder.
 * Generated by PHPUnit on 2012-03-24 at 14:59:34.
 */
namespace parallely\Test;

class BuilderTest extends \PHPUnit_Framework_TestCase {

    /**
     * @dataProvider transportProvider
     */
    public function testBuild($sTransport, $aConfig = array()) {
        $oExecute = \parallely\Builder::build(array(), $sTransport, $aConfig);
        $this->assertInstanceOf('\\parallely\\Execute', $oExecute);

        if (empty($sTransport) !== true) {
            $this->assertInstanceOf('\\parallely\\TransportInterface', $oExecute->getTransport());
        }
    }

    /**
     * @dataProvider transportProvider
     */
    public function testTransport($sTransport, $aConfig = array()) {
        $oTransport = \parallely\Builder::transport($sTransport, $aConfig);
        if (empty($sTransport) !== true) {
            $this->assertInstanceOf('\\parallely\\TransportInterface', $oTransport);
        }
    }

    /**
     * Data provider for build-test
     *
     * @return array
     */
    public function transportProvider() {
        return array(
            array(
                'sharedmemory',
                array(
                    'path' => '/tmp'
                )
            ),
            array(
                'file',
                array(
                    'path' => '/tmp'
                )
            ),
            array(
                'memcached',
                array(
                    'host' => 'localhost',
                    'port' => 11211
                )
            ),
            array(
                'xcache',
                new \stdClass()
            ),
            array(
                'apc',
                array()
            ),
            array(
                null
            )
        );
    }

    /**
     * Test that a unknown transport throws an exception
     */
    public function testEmptyTransport() {
        $this->assertNull(\parallely\Builder::transport('blafasel'));
    }

    /**
     *
     */
    public function testTransportMissingConfig() {
        $this->setExpectedException('\\parallely\\Exception', \parallely\Exception::SETUP_ERROR);
        \parallely\Builder::transport('file');
    }
}
